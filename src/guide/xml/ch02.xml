<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
	 xmlns:xlink="http://www.w3.org/1999/xlink"
	 version="5.0" xml:id="using">
<info>
  <?db filename="ch02.html"?>
  <title>Using the stylesheets</title>
</info>

<para>In principle, the stylesheets will run with any conformant XSLT
3.0 processor. For many users, that means
<link xlink:href="http://saxonica.com/">Saxon</link>. Although earlier versions
may work, Saxon 10.1 or later is recommended.</para>

<para>In principle, the instructions for using the stylesheets are
straightforward: using your XSLT 3.0 processor of choice, transform your
DocBook source documents with the <filename>docbook.xsl</filename>
stylesheet in the <filename class="directory">xslt</filename>
directory of the distribution.</para>

<para>In practice, for most users, running the stylesheets will
require getting a Java environment configured appropriately. For many,
one of the most significant challenges is getting all of the
dependencies sorted out. Modern software development, for better or
worse, often consists of one library relying on another which relies
on another, etc.</para>

<para>The <citetitle>DocBook xslTNG</citetitle> stylesheets attempt to
simplify this process, especially for the “out of the box” experience
by providing two convenience methods for running the stylesheets: a
jar file with a <classname>Main</classname> class, and a Python script
that attempts, among other things, to make sure all of the
dependencies are available.</para>

<para>If you’re an experience Java user, you may prefer to simply run
the stylesheets
<link linkend="run-with-java">directly with Java</link>.</para>

<section xml:id="java-main">
<title>Using the Jar</title>

<para>The <link linkend="get-github">ZIP distribution</link> includes a
JAR file that you can run directly. That
JAR file is
<filename><replaceable>$ROOT</replaceable
>/lib/docbook-xslTNG-<replaceable>version</replaceable>.jar</filename>
where “<replaceable>$ROOT</replaceable>” is whatever directory you chose
to unzip the distribution into and <replaceable>version</replaceable> is the
stylesheet version.</para>

<para>Assuming you unzipped the version <?DocBook-xslTNG-version?> distribution into
<filename class="directory">/home/ndw/xsltng</filename>, you can run
the JAR like this:</para>

<para><code>java -jar /home/ndw/xsltng/lib/docbook-xslTNG-<?DocBook-xslTNG-version?>.jar</code></para>

<para>Let’s try it out. Open a shell window and change to the samples directory,
<filename class="directory">/home/ndw/xsltng/samples</filename> assuming you unzipped
it as described above. Now run the java command:</para>

<screen role="monochrome border"
><userinput>$ java -jar ../lib/docbook-xslTNG-0.9.12.jar article.xml</userinput>
<computeroutput><![CDATA[<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml">
…more HTML here...
<nav class="bottom"></nav></body></html>]]></computeroutput></screen>

<para>That big splash of HTML was your first DocBook document
formatted by the stylesheets! Slightly more usefully, you can save
that HTML in a file:
</para>

<screen><userinput
>$ java -jar ../lib/docbook-xslTNG-0.9.12.jar article.xml \
        -o:article.html</userinput
></screen>

<para>If you now open <filename>article.html</filename> in your
favorite web browser, you’ll see the transformed sample document
which should look like <xref linkend="fig-sample"/>.
</para>

<figure xml:id="fig-sample">
<title>The sample document: article.xml</title>
<mediaobject>
<alt>A rendering of the sample document</alt>
<imageobject>
<imagedata fileref="media/sample.png"/>
</imageobject>
<textobject>
<para>This is a rendering of the sample document. It consists of the
title “Sample Article” centered on the screen with a short paragraph
of text below it. The text reads: This is a very simple DocBook
document. It serves as a kind of "smoke test" to demonstrate that the
stylesheets are working.
</para>
</textobject>
</mediaobject>
</figure>

<para xml:id="caveats">The JAR file, run this way, accepts the same
<link xlink:href="https://www.saxonica.com/html/documentation/using-xsl/commandline/">command line options</link> as Saxon, with a few caveats:</para>

<variablelist>
<varlistentry><term>No <code>-x</code>, <code>-y</code>, or <code>-r</code> options</term>
<listitem>
<para>The executable in the JAR file automatically configures Saxon to
use a catalog-based resolver and points the resolver at a catalog that
includes the files in the distribution.
</para>
</listitem>
</varlistentry>
<varlistentry><term>No <code>-init</code> option</term>
<listitem>
<para>The <citetitle>DocBook xslTNG</citetitle>
<link xlink:href="extensions">extension functions</link> will be registered
automatically.</para>
</listitem>
</varlistentry>
<varlistentry><term>Multiple <code>-catalog</code> options</term>
<listitem>
<para>You can repeat the <code>-catalog</code> option. All of the catalogs
you specify will be searched before the default catalog.</para>
</listitem>
</varlistentry>
<varlistentry><term>Default stylesheet</term>
<listitem>
<para>If you do not specify a stylesheet with the <code>-xsl</code> option,
the <filename>xslt/docbook.xsl</filename> stylesheet will be used automatically.
</para>
</listitem>
</varlistentry>
</variablelist>
</section>

<section xml:id="python-script">
<title>Using the Python script</title>

<para>The <link linkend="get-github">ZIP distribution</link> includes a
Python script in the <filename class="directory">bin</filename> directory.
This script behaves much like the JAR file described in
<xref linkend="java-main"/>. In particular,
it accepts the same
<link xlink:href="https://www.saxonica.com/html/documentation/using-xsl/commandline/">command line options</link> as Saxon, with
<link linkend="caveats">the same caveats</link>.</para>

<para>The significant feature of the Python script is that it will attempt
to sort out the dependencies for you. You <emphasis>must</emphasis> have
Maven (the <command>mvn</command> command) installed in order to use this
script.</para>

<para>The first time you run the script, it will attempt to work out all of
the necessary dependencies and will then arrange for the Java class path
to include them all.</para>

<para>The script stores its configuration in
<code>.docbook-xsltng.json</code> in your home directory in order to avoid
having to download all of the dependency information each time.</para>

<para>FIXME: describe the other options of the python script.</para>
</section>

<section xml:id="run-with-java">
<title>Run with Java</title>

<para>Assuming you’ve organized your class path so that all of the
dependencies are available (you may find that using a tool like Gradle
or Maven simplifies this process), simply run the Saxon class.</para>

<para>For Saxon HE, the class is <classname>net.sf.saxon.Transform</classname>.
For Saxon PE and EE, the class is <classname>com.saxonica.Transform</classname>.</para>

</section>


<section xml:id="extensions">
<title>Extension functions</title>

<para>The stylesheets are distributed with several extension functions:</para>

<variablelist>
<varlistentry><term><function>ext:cwd</function></term>
<listitem>
<para>Returns the “current working directory” where the processor is running.
</para>
</listitem>
</varlistentry>
<varlistentry><term><function>ext:image-properties</function></term>
<listitem>
<para>Returns basic properties of an image, width and height.
</para>
</listitem>
</varlistentry>
<varlistentry><term><function>ext:image-metadata</function></term>
<listitem>
<para>Returns much more comprehensive image properties and understands
far more image types than <function>ext:image-properties</function>.
Requires the <biblioref linkend="metadata-extractor"/> libraries.
</para>
</listitem>
</varlistentry>
<varlistentry><term><function>ext:pygmentize</function></term>
<listitem>
<para>Runs the external <biblioref linkend="Pygments"/> processor on
a verbatim listing to add syntax highlighting.
</para>
</listitem>
</varlistentry>
<varlistentry><term><function>ext:pygmentize-available</function></term>
<listitem>
<para>Returns true if the external <biblioref linkend="Pygments"/> processor
is available on the current system.
</para>
</listitem>
</varlistentry>
<varlistentry><term><function>ext:xinclude</function></term>
<listitem>
<para>Performs <biblioref linkend="xinclude"/> processing. This extension supports
the basic XPointer schemes, <biblioref linkend="RFC5147"/> fragment identifiers,
and <biblioref linkend="searchfid"/>, a scheme that supports searching in text
documents.
</para>
</listitem>
</varlistentry>
<varlistentry><term><function>ext:validate-with-relax-ng</function></term>
<listitem>
<para>Performs RELAX NG validation.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>At the time of this writing, all of these extension functions require
Saxon 10.1 or later.
Make sure that the <filename>docbook-xsltng-<replaceable>version</replaceable>.jar</filename>
file is on your class path and use the Saxon <code>-init</code> option to
load them:</para>

<screen><?db verbatim-style="plain"
?><userinput>-init:org.docbook.xsltng.extensions.Register</userinput></screen>

<section xml:id="ext-debug">
<title>Extension function debugging</title>

<para>You can enable the following trace events by setting
the system property <property>org.docbook.xsltng.verbose</property>:</para>

<screen>    public static final String REGISTRATION = "registration";
    public static final String IMAGE_PROPERTIES = "image-properties";
    public static final String IMAGE_ERRORS = "image-errors";
    public static final String PYGMENTIZE_SHOW_COMMAND = "pygmentize-show-command";
    public static final String PYGMENTIZE_SHOW_RESULTS = "pygmentize-show-results";
    public static final String PYGMENTIZE_ERRORS = "pygmentize-errors";
            -Dorg.docbook.extensions.pygmentize=${PYGMENTIZE} \

</screen>
</section>

</section>

<section xml:id="chunking">
<title>“Chunked” output</title>

<para>FIXME: finish this section.
</para>
</section>

<section xml:id="profiling">
<title>Effectivity attributes and profiling</title>

<para>When documenting computer hardware and software systems, it’s
very common to have different documentation sets that overlap
signficantly. Documentation for two different models of network
router, for example, might differ only in a few specific details. Or a
user guide aimed at experts might have a lot in common with the new user
guide.</para>

<section>
<title>Effectivity</title>

<para>There are many ways to address this problem, but one of the
simplest is to identify the “effectivity” of different parts of a
document. Effectivity in this context means identifying the parts
of a document that are effective for different audiences.</para>

<para>When a document is formatted, the stylesheets can selectively
include or omit elements based on their configured effectivity. This
“profiled” version of the document is the one that’s explicitly
targeted to the audience specified.</para>

<para>DocBook supports a wide variety of common attributes for this
purpose:</para>

<table>
<title>Common DocBook effectivity attributes</title>
<tgroup cols="2">
<thead>
<row>
<entry>Attribute</entry>
<entry>Nominal effectivity axis</entry>
</row>
</thead>
<tbody>
<row><entry>arch</entry>
     <entry>The architecture, Intel or AMD</entry></row>
<row><entry>audience</entry>    
     <entry>The audience, operations or development</entry></row>
<row><entry>condition</entry>   
     <entry>Any condition (semantically neutral)</entry></row>
<row><entry>conformance</entry> 
     <entry>The conformance level</entry></row>
<row><entry>os</entry>          
     <entry>The operating system, Windows or Linux</entry></row>
<row><entry>outputformat</entry>
     <entry>The output format, print or online</entry></row>
<row><entry>revision</entry>    
     <entry>The revision, 3.4 or 4.0.</entry></row>
<row><entry>security</entry>    
     <entry>The security, secret or top-secret</entry></row>
<row><entry>userlevel</entry>   
     <entry>The user level, novice or expert</entry></row>
<row><entry>vendor</entry>      
     <entry>The vendor, Acme or Yoyodyne</entry></row>
<row><entry>wordsize</entry>    
     <entry>The word size, 32 or 64 bit</entry></row>
</tbody>
</tgroup>
</table>

<para>In addition, the stylesheets support profiling on several common attributes
that are not explicitly for effectivity: <att>xml:lang</att>, <att>revisionflag</att>,
and <att>role</att>.</para>

<note>
<para>DocBook places no constraints on the values used for effectivity
and the stylesheets don’t either. You’re free to use “cat” and “dog”
as effectivity values in the <att>wordsize</att> attribute, if you
wish. The further you deviate from the nominal meaning, the more
important it is to document your system!</para>
</note>

<para>Consider <xref linkend="ex-profile-os"/>.</para>

<example xml:id="ex-profile-os">
<title>A contrived effectivity example</title>
<programlisting><?db verbatim-style="plain"
?><![CDATA[<para>This is an utterly contrived example of
some common text. Options are introduced with the
<phrase os="windows">/</phrase>
<phrase os="mac;linux">-</phrase> character.</para>]]></programlisting>
</example>

<para>If this document is formatted with the <parameter>profile-os</parameter>
parameter set to “windows”, it will produce:</para>

<blockquote>
<para>This is an utterly contrived example of
some common text. Options are introduced with the
<phrase os="windows">/</phrase>
 character.</para>
</blockquote>

<para>If “mac” or “linux” is specified, it will produce:</para>

<blockquote>
<para>This is an utterly contrived example of
some common text. Options are introduced with the

<phrase os="mac;linux">-</phrase> character.</para>
</blockquote>

<important>
<para>If the document is formatted without any profiling, <emphasis>all</emphasis>
of the versions will be included:</para>
<blockquote>
<para>This is an utterly contrived example of
some common text. Options are introduced with the
<phrase>/</phrase>
<phrase>-</phrase> character.</para>
</blockquote>
<para>That is unlikely to work well.</para>
</important>

</section>
<section>
<title>Profiling</title>

<para>The profiling parameters are applied to every document:
<parameter>profile-arch</parameter>,
<parameter>profile-audience</parameter>,
<parameter>profile-condition</parameter>,
<parameter>profile-conformance</parameter>,
<parameter>profile-lang</parameter>,
<parameter>profile-os</parameter>,
<parameter>profile-outputformat</parameter>,
<parameter>profile-revision</parameter>,
<parameter>profile-revisionflag</parameter>,
<parameter>profile-role</parameter>,
<parameter>profile-security</parameter>,
<parameter>profile-userlevel</parameter>,
<parameter>profile-vendor</parameter>, and
<parameter>profile-wordsize</parameter>. Each of these values is treated
as a string and broken into tokens at the
<parameter>profile-separator</parameter>.</para>

<para>For every element in the source document:</para>

<itemizedlist>
<listitem>
<para>If it specifies a value for an effectivity attribute, the value
is split into tokens at the
<parameter>profile-separator</parameter>.</para>
</listitem>
<listitem>
<para>If the corresponding profile parameter is not empty, then the
element is discarded unless at least one of the tokens in the profile
parameter list is also in the effectivity list.</para>
</listitem>
</itemizedlist>

<para>In practice, elements that don’t specify effectivity are always included
and profile parameters that are empty don’t exclude any elements.</para>

</section>

<section xml:id="dynprofiling">
<title>Dynamic profiling</title>
<para>FIXME: finish this section</para>
</section>
</section>

<section xml:id="docbook.py">
<title>The docbook script</title>
<para>FIXME: finish this section</para>
</section>

</chapter>

